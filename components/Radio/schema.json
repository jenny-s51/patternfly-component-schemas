{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "Radio Props",
  "description": "Props for the Radio component",
  "properties": {
    "aria-label": {
      "description": "Aria label for the radio.",
      "type": "string"
    },
    "body": {
      "description": "Body of the radio. (React component or element)"
    },
    "checked": {
      "description": "Flag to show if the radio is checked.",
      "type": "boolean"
    },
    "className": {
      "description": "Additional classes added to the radio wrapper. This wrapper will be div element by default. It will be a label element if\nisLabelWrapped is true, or it can be overridden by any element specified in the component prop.",
      "type": "string",
      "default": "''"
    },
    "component": {
      "description": "Sets the radio wrapper component to render. Defaults to \"div\". If set to \"label\", behaves the same as if isLabelWrapped prop was specified. (Type: React.ElementType)"
    },
    "description": {
      "description": "Description text of the radio. (React component or element)"
    },
    "id": {
      "description": "Id of the radio.",
      "type": "string"
    },
    "inputClassName": {
      "description": "Additional classes added to the radio input.",
      "type": "string"
    },
    "isChecked": {
      "description": "Flag to show if the radio is checked.",
      "type": "boolean"
    },
    "isDisabled": {
      "description": "Flag to show if the radio is disabled.",
      "type": "boolean",
      "default": false
    },
    "isLabelWrapped": {
      "description": "Flag to indicate whether the radio wrapper element is a native label element for the radio input. Will not apply if a component prop (with a value other than a \"label\") is specified.",
      "type": "boolean"
    },
    "isValid": {
      "description": "Flag to show if the radio selection is valid or invalid.",
      "type": "boolean",
      "default": true
    },
    "label": {
      "description": "Label text of the radio. (React component or element)"
    },
    "labelPosition": {
      "description": "Sets the position of the label. Defaults to 'end' (after the radio input).",
      "enum": [
        "start",
        "end"
      ]
    },
    "name": {
      "description": "Name for group of radios",
      "type": "string"
    },
    "onChange": {
      "description": "A callback for when the radio selection changes. (Function: (event: React.FormEvent<HTMLInputElement>, checked: boolean) => void)",
      "default": "() => {}"
    },
    "ouiaId": {
      "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
    },
    "ouiaSafe": {
      "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
      "type": "boolean"
    }
  },
  "required": [
    "id",
    "name"
  ],
  "additionalProperties": false
}