{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "title": "Page Props",
  "description": "Props for the Page component",
  "properties": {
    "additionalGroupedContent": {
      "description": "Additional content of the group (React component or element)"
    },
    "banner": {
      "description": "Banner component for the page. This will be rendered above a breadcrumb if one is also passed. (React component or element)"
    },
    "breadcrumb": {
      "description": "Breadcrumb component for the page (React component or element)"
    },
    "breadcrumbProps": {
      "description": "Additional props of the breadcrumb (Type: PageBreadcrumbProps)"
    },
    "children": {
      "description": "Content rendered inside the main section of the page layout (e.g. <PageSection />) (React component or element)"
    },
    "className": {
      "description": "Additional classes added to the page layout",
      "type": "string"
    },
    "defaultManagedSidebarIsOpen": {
      "description": "If true, the managed sidebar is initially open for desktop view",
      "type": "boolean",
      "default": true
    },
    "drawerDefaultSize": {
      "description": "Sets default drawer size",
      "type": "string"
    },
    "drawerMaxSize": {
      "description": "Sets the maximum drawer size",
      "type": "string"
    },
    "drawerMinSize": {
      "description": "Sets the minimum drawer size",
      "type": "string"
    },
    "getBreakpoint": {
      "description": "The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\nYou can override the default getBreakpoint function to return breakpoints at different sizes than the default\nYou can view the default getBreakpoint function here:\nhttps://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts",
      "enum": [
        "default",
        "sm",
        "md",
        "lg",
        "xl",
        "2xl"
      ],
      "default": "(width: number): 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' => {\n  if (width === null) {\n    return null;\n  }\n  if (width >= globalWidthBreakpoints['2xl']) {\n    return '2xl';\n  }\n  if (width >= globalWidthBreakpoints.xl) {\n    return 'xl';\n  }\n  if (width >= globalWidthBreakpoints.lg) {\n    return 'lg';\n  }\n  if (width >= globalWidthBreakpoints.md) {\n    return 'md';\n  }\n  if (width >= globalWidthBreakpoints.sm) {\n    return 'sm';\n  }\n  return 'default';\n}"
    },
    "getVerticalBreakpoint": {
      "description": "The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\nYou can override the default getVerticalBreakpoint function to return breakpoints at different sizes than the default\nYou can view the default getVerticalBreakpoint function here:\nhttps://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts",
      "enum": [
        "default",
        "sm",
        "md",
        "lg",
        "xl",
        "2xl"
      ],
      "default": "(height: number): 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' => {\n  if (height === null) {\n    return null;\n  }\n  if (height >= globalHeightBreakpoints['2xl']) {\n    return '2xl';\n  }\n  if (height >= globalHeightBreakpoints.xl) {\n    return 'xl';\n  }\n  if (height >= globalHeightBreakpoints.lg) {\n    return 'lg';\n  }\n  if (height >= globalHeightBreakpoints.md) {\n    return 'md';\n  }\n  if (height >= globalHeightBreakpoints.sm) {\n    return 'sm';\n  }\n  return 'default';\n}"
    },
    "groupProps": {
      "description": "Additional props of the group (Type: PageGroupProps)"
    },
    "horizontalSubnav": {
      "description": "Horizontal sub navigation component for the page (React component or element)"
    },
    "isBreadcrumbGrouped": {
      "description": "Flag indicating if the breadcrumb should be in a group",
      "type": "boolean"
    },
    "isBreadcrumbWidthLimited": {
      "description": "Flag indicating if breadcrumb width should be limited",
      "type": "boolean",
      "default": false
    },
    "isContentFilled": {
      "description": "Enables children to fill the available vertical space. Child page sections or groups that should fill should be passed the isFilled property.",
      "type": "boolean"
    },
    "isHorizontalSubnavGrouped": {
      "description": "Flag indicating if the horizontal sub navigation should be in a group",
      "type": "boolean"
    },
    "isHorizontalSubnavWidthLimited": {
      "description": "Flag indicating if horizontal sub navigation width should be limited",
      "type": "boolean"
    },
    "isManagedSidebar": {
      "description": "If true, manages the sidebar open/close state and there is no need to pass the isSidebarOpen boolean into\nthe sidebar component or add a callback onSidebarToggle function into the Masthead component",
      "type": "boolean",
      "default": false
    },
    "isNotificationDrawerExpanded": {
      "description": "Flag indicating Notification drawer in expanded",
      "type": "boolean",
      "default": false
    },
    "mainAriaLabel": {
      "description": "Accessible label, can be used to name main section",
      "type": "string"
    },
    "mainComponent": {
      "description": "HTML component used as main component of the page. Defaults to 'main', only pass in 'div' if another 'main' element already exists.",
      "enum": [
        "main",
        "div"
      ],
      "default": "'main'"
    },
    "mainContainerId": {
      "description": "an id to use for the [role=\"main\"] element",
      "type": "string"
    },
    "mainTabIndex": {
      "description": "tabIndex to use for the [role=\"main\"] element, null to unset it (Type: number | null)",
      "default": -1
    },
    "masthead": {
      "description": "Masthead component (e.g. <Masthead />) (React component or element)"
    },
    "notificationDrawer": {
      "description": "Notification drawer component for an optional notification drawer (e.g. <NotificationDrawer />) (React component or element)"
    },
    "onNotificationDrawerExpand": {
      "description": "Callback when notification drawer panel is finished expanding. (Type: (event: KeyboardEvent | React.MouseEvent | React.TransitionEvent) => void)",
      "default": "() => null"
    },
    "onPageResize": {
      "description": "Can add callback to be notified when resize occurs, for example to set the sidebar isSidebarOpen prop to false for a width < 768px\nReturns object { mobileView: boolean, windowSize: number } (Type: ((event: MouseEvent | TouchEvent | React.KeyboardEvent, object: any) => void) | null)"
    },
    "role": {
      "description": "Sets the value for role on the <main> element",
      "type": "string"
    },
    "sidebar": {
      "description": "Sidebar component for a side nav, recommended to be a PageSidebar. If set to null, the page grid layout\nwill render without a sidebar. (React component or element)"
    },
    "skipToContent": {
      "description": "Skip to content component for the page (Type: React.ReactElement<any>)"
    }
  },
  "additionalProperties": false
}