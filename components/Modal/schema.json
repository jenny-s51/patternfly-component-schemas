{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "title": "Modal Props",
  "description": "Props for the Modal component",
  "properties": {
    "appendTo": {
      "description": "The parent container to append the modal to. Defaults to \"document.body\". (Type: HTMLElement | (() => HTMLElement))",
      "default": "() => document.body"
    },
    "aria-describedby": {
      "description": "Id to use for the modal box description. This should match the ModalHeader labelId or descriptorId.",
      "type": "string"
    },
    "aria-label": {
      "description": "Adds an accessible name to the modal when there is no title in the ModalHeader.",
      "type": "string"
    },
    "aria-labelledby": {
      "description": "Id to use for the modal box label. This should include the ModalHeader labelId.",
      "type": "string"
    },
    "backdropClassName": {
      "description": "Additional classes added to the modal backdrop.",
      "type": "string"
    },
    "children": {
      "description": "Content rendered inside the modal. (React component or element)"
    },
    "className": {
      "description": "Additional classes added to the modal.",
      "type": "string"
    },
    "disableFocusTrap": {
      "description": "Flag to disable focus trap.",
      "type": "boolean"
    },
    "elementToFocus": {
      "description": "The element to focus when the modal opens. By default the first\nfocusable element will receive focus. (Type: HTMLElement | SVGElement | string)"
    },
    "id": {
      "description": "An id to use for the modal box container.",
      "type": "string"
    },
    "isOpen": {
      "description": "Flag to show the modal.",
      "type": "boolean",
      "default": false
    },
    "maxWidth": {
      "description": "Maximum width of the modal. (Type: number | string)"
    },
    "onClose": {
      "description": "Add callback for when the close button is clicked. This prop needs to be passed to render the close button (Type: (event: KeyboardEvent | React.MouseEvent) => void)"
    },
    "onEscapePress": {
      "description": "Modal handles pressing of the escape key and closes the modal. If you want to handle\nthis yourself you can use this callback function. (Function: (event: KeyboardEvent) => void)"
    },
    "ouiaId": {
      "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
    },
    "ouiaSafe": {
      "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
      "type": "boolean",
      "default": true
    },
    "position": {
      "description": "Position of the modal. By default a modal will be positioned vertically and horizontally centered.",
      "enum": [
        "default",
        "top"
      ],
      "default": "'default'"
    },
    "positionOffset": {
      "description": "Offset from alternate position. Can be any valid CSS length/percentage.",
      "type": "string"
    },
    "variant": {
      "description": "Variant of the modal.",
      "enum": [
        "small",
        "medium",
        "large",
        "default"
      ],
      "default": "'default'"
    },
    "width": {
      "description": "Default width of the modal. (Type: number | string)"
    }
  },
  "required": [
    "children"
  ],
  "additionalProperties": false
}